from pprint import pprint

from flask import Flask, request
import json
from pymorphy2 import MorphAnalyzer

app = Flask(__name__)
theme = ['']
storage = {}
c = [-1]
f = [0]
points = [0, 0, 0]
morph = MorphAnalyzer()
themes = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
          'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
          'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]
# file_quest_answer = open('questions_and_answers2.txt', 'r')
# all_quest = file_quest_answer.readlines()
# quests = all_quest[::3]
# pictures = all_quest[1::3]
# answers = all_quest[2::3]
# print(quests, answers, pictures)

# file_quest_answer.close()

answer_users = []
session_ids = []


@app.route('/', methods=['POST'])
def index():
    global theme, c, f, points, themes
    req = request.json
    session_id = req["session"]["session_id"]
    print(session_id)
    print(c[0])
    print('----------------')
    if session_id not in session_ids:
        session_ids.append(session_id)
    response = req['request']['original_utterance'].lower()
    if 'заново' in response:
        theme = ['']
        c[0] = -1
        f[0] = 1
        points[:] = [0, 0, 0]
        themes[:] = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
                     'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
                     'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]
    if req["session"]["new"] or f[0] or len(session_ids) > 1:
        del session_ids[0]
        f[0] = 0
        first_answer = 'Здравствуй, гений! Это игра "Мозгобойня". ' \
                       'Предлагаю на выбор три темы для игры: "Великие сражения двадцатого века"; ' \
                       '"Еда, я люблю тебя"; "Карты, деньги, финсовет".'
        theme[0] = req["request"]["original_utterance"].lower()
        return generate_response(req, first_answer)

    if theme[0] not in themes:
        theme[0] = req["request"]["original_utterance"].lower()

    print(req['request']['original_utterance'].lower())
    print('-----------')

    if theme[0] in {'великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему"}:
        if c[0] == -1:
            rools = 'Правила очень просты) Всего есть 3 тура, в каждом из них по 7 вопросов, ' \
                    'на которые и нужно ответить) В конце каждого тура озвучиваются ответы. ' \
                    'После окончания всех туров озвучивается Ваш результат. ' \
                    'Ну, что? Погнали!'
            c[0] += 1

            return generate_response(req, rools, end_session=False)

        c[0] += 1

        if c[0] != 1:
            answer = req['request']['original_utterance'].lower()
            answer_users.append(answer)

        return great_fights_20_century(req, answer_users)

    elif theme[0] in {'еда я люблю тебя', 'еда, я люблю тебя', "вторая тема", "вторую тему"}:
        if c[0] == -1:
            rools = 'Правила очень просты) Всего есть 3 тура, в каждом из них по 7 вопросов, ' \
                    'на которые и нужно ответить) В конце каждого тура озвучиваются ответы. ' \
                    'После окончания всех туров озвучивается Ваш результат. ' \
                    'Ну, что? Погнали!'
            c[0] += 1

            return generate_response(req, rools, end_session=False)

        c[0] += 1

        if c[0] != 1:
            answer = req['request']['original_utterance'].lower()
            answer_users.append(answer)

        return eat_i_love_you(req, answer_users)

    elif theme[0] in {'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"}:
        if c[0] == -1:
            rools = 'Правила очень просты) Всего есть 3 тура, в каждом из них по 7 вопросов, ' \
                    'на которые и нужно ответить) В конце каждого тура озвучиваются результаты. ' \
                    'После окончания всех туров озвучивается Ваш общий результат. ' \
                    'Ну, что? Погнали!'
            c[0] += 1

            return generate_response(req, rools, end_session=False)

        c[0] += 1

        if c[0] != 1:
            answer = req['request']['original_utterance'].lower()
            answer_users.append(answer)

        return black_money_for_ALEXANDRIT_R8(req, answer_users)

    theme = ['']
    c[0] = -1
    f[0] = 0
    points[:] = [0, 0, 0]
    themes[:] = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
                 'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
                 'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]

    return generate_response(req, 'Я плохо Вас расслышала или Вы выбрали тему, которой нет в перечне - '
                                  'повторите тему.', end_session=False)


def generate_question_with_photo(req, quest, picture, speaking='', end_session=False):
    if not speaking:
        speaking = quest
    res = {
        "version": req["version"],
        "session": req["session"],
        "response": {
            "end_session": end_session,
            "text": quest,
            "tts": f'{speaking} <speaker audio="dialogs-upload/1a41559d-aec5-4926-8a0c-07d136e1c591/f54c5465-3bad-4ff6-'
                   f'90c6-cfaf5faa3316.opus">',
            "card": {
                "type": "BigImage",
                "image_id": picture,
                "description": quest
            }
        }
    }
    return json.dumps(res, indent=2)


def generate_question(req, quest, speaking='', end_session=False):
    if not speaking:
        speaking = quest
    res = {
        "version": req["version"],
        "session": req["session"],
        "response": {
            "end_session": end_session,
            "text": quest,
            "tts": f'{speaking} <speaker audio="dialogs-upload/1a41559d-aec5-4926-8a0c-07d136e1c591/f54c5465-3bad-'
                   f'4ff6-90c6-cfaf5faa3316.opus">'
        }
    }
    return json.dumps(res, indent=2)


def generate_response(req, text, speaking='', end_session=False):
    if not speaking:
        speaking = text
    res = {
        "version": req["version"],
        "session": req["session"],
        "response": {
            "end_session": end_session,
            "tts": speaking,
            "text": text
        }
    }
    return json.dumps(res, indent=2)


def great_fights_20_century(req, answer_users):
    if c[0] == 1:
        speak = 'Ваш заказ готов! sil <[500]>Капучиноооооо sil <[500]> Ой, извините, не туда. sil <[500]> Пожалуй ' \
                'начнём. Первый вопрос. oreo sil <[500]> Этот корабль пережил крупнейшие в+ойны 20 века, но ' \
                'участвовал в них только до 1948' \
                ' года. Началось все с Японской войны и Цусимского сражения, далее - Первая Мировая война и две ' \
                'революции, в одной из которых он содействовал восставшим. О каком корабле речь?'
        quest = 'Первый вопрос. Этот корабль пережил крупнейшие войны 20 века, но участвовал в них только до 1948' \
                ' года. Началось все с Японской войны и Цусимского сражения, далее - Первая Мировая война и две ' \
                'революции, в одной из которых он содействовал восставшим. О каком корабле речь?'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 2:
        if answer_users[-1] in {'аврора', 'авроре', 'о корабле аврора'}:
            points[0] += 1
        quest = 'Правильный ответ: О корабле Аврора.\nВторой вопрос. В 1942 году в США начали выпускать детские' \
                ' противогазы, выполненные в виде этого ушастого персонажа. Зверек, ставший символом американской' \
                ' поп-культуры, должен был отвлечь детей от страха и создать ощущение игры. В виде кого выпускали' \
                ' детские противогазы?'
        return generate_question(req, quest)

    if c[0] == 3:
        if answer_users[-1] in {'микки - мауса', 'микки мауса'}:
            points[0] += 1
        quest = 'Правильный ответ: Детские противогазы выпускали в виде Микки Мауса.\nТретий вопрос. Одна из' \
                ' моделей танка Т-34 под названием «Rudy», входившая в состав 1-й Варшавской бригады имени героев' \
                ' Вестерплатте, стала «звездой» телесериала по повести Януша Пшимановского. В связи с этим в игре' \
                ' World of Tanks только в экипаже «Rudy» можно брать ее. Кого?'
        return generate_question(req, quest)

    if c[0] == 4:
        if answer_users[-1] in {'собака', 'собаку'}:
            points[0] += 1
        quest = 'Правильный ответ: В экипаж "Rudy" можно брать собаку.\nЧетвёртый вопрос. Во время Первой' \
                ' Мировой войны на кораблях часто рисовали необычный камуфляж, мешающий капитану вражеской' \
                ' подводной лодки прицелиться. Например, британцы шли на хитрость и изображали на носу судна' \
                ' большой бурун, тем самым создавая у противнику иллюзию скорости. Чем по сути является бурун?'
        return generate_question(req, quest)

    if c[0] == 5:
        if answer_users[-1] in {'волной', 'волны', "волну"}:
            points[0] += 1
        quest = 'Правильный ответ: Бурун является волной.\nПятый вопрос. В 1943 году король Георг VI сделал' \
                ' подарок воинам Сталинграда. Предмет внушительной длины из первоклассного шеффилдского материала' \
                ' вручили на Тегеранской конференции. В ходе церемонии солдат британского караула передал его' \
                ' советскому воину. Что подарил Георг VI?'
        return generate_question(req, quest)

    if c[0] == 6:
        if 'меч' in answer_users[-1]:
            points[0] += 1
        quest = 'Правильный ответ: Георг VI подарил меч.\nШестой вопрос. Ситуацию, которая сложилась к 1942 году' \
                ' на севере Африки, историки сравнивали с этим физическим явлением. За предыдущие два года' \
                ' было пять сражение, в ходе которых войскам союзников не хватало мощности танков, чтобы закре' \
                'питься на позициях. Им приходилось то продвигаться вперед, то отступать. О каком явлении речь?'
        return generate_question(req, quest)

    if c[0] == 7:
        if answer_users[-1] in {'с колебанием маятника', 'маятник', "с маятником", "о колебании маятника",
                                "о маятнике", "маятн", "колебание маятника"}:
            points[0] += 1
        quest = 'Правильный ответ: Речь идёт о колебании маятника.\nСедьмой вопрос. Из-за бомбежки Москвы в 1941' \
                ' году Сталину предложили эвакуировать эту личность в города с подходящей универсальной базой,' \
                ' но подобные территории тоже были под угрозой, и его на аре поездах с охраной перевезли в Тюмень.' \
                ' А место, где он находился в Москве, замаскировали под небольшой дом. Кого эвакуировали в Тюмень?'
        return generate_question(req, quest)

    if c[0] == 8:
        if answer_users[-1] in {'в.и.ленина', 'ленина', "владимира ильича ленина",
                                "владимира ленина", "владимира ильича", 'ленин'}:
            points[0] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[0]).word
        return generate_response(req, f'Правильный ответ: Владимира Ильича Ленина.\n'
                                      f'Итого за первый тур Вы набрали: {points[0]} {point}.\n Во втором туре '
                                      f'вопросы будут связаны с фотографиями, на их выполнение будет отведено '
                                      f'по 30 секунд. Ну что ж?) Желаю удачи! Погнали!')

    if c[0] == 9:
        quest = 'Первый вопрос. В каком городе расположен музей?'
        picture = '965417/c5699c02fd0c93a07020'
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 10:
        quest = 'Правильный ответ: в городе Волгоград.\n' \
                'Второй вопрос. Картина Александра Александровича Дейнеки посвящена обороне...'
        picture = '1540737/527c1d3d08ae80602d21'
        if answer_users[-1] in {'волгоград', 'в волгограде', 'в городе волгоград', 'волгограде'}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 11:
        quest = 'Правильный ответ: Картина Александра Александровича Дейнеки посвящена обороне ' \
                'Севастополя.\nТретий вопрос. ' \
                'Памятный знак какой организации?'
        picture = '213044/f6db3f54f3f564321bae'
        if "севастопол" in answer_users[-1]:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 12:
        quest = 'Правильный ответ: это памятный знак организации "Варшавский договор".\nЧетвёртый вопрос. Скриншот ' \
                'статьи на Википедии о каком человеке?'
        picture = '1540737/07f4d326a1172b5c7b39'
        if answer_users[-1] in {'варшавский договор', 'варшавского договора', "знак варшавского договора"}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 13:
        quest = 'Скриншот статьи о Георгии Константиновиче Жукове.\nПятый вопрос. Кто скрыт ' \
                'на карикатуре времен Холодной войны?'
        picture = '1652229/5858cdeacd8f25416fcd'
        if 'жуков' in answer_users[-1]:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 14:
        quest = 'На карикатуре времён Холодной войны скрыт Джон Кеннеди.\nШестой вопрос. ' \
                'Какому ныне не существующему государству принадлежат танки?'
        picture = '1652229/f050774b6b392a0491f9'
        if answer_users[-1] in {'джон кеннеди'}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 15:
        quest = 'Танки принадлежат Чехословакии.\nСедьмой вопрос. ' \
                'Какую местность на севере Франции воплотили в игре World of Tanks?'
        picture = '213044/7d1b52d028b983b2cf36'
        if answer_users[-1] in {'чехословакии', "чехословакия"}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 16:
        if answer_users[-1] in {'нормандии', "нормандию", "нормандия"}:
            points[1] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[1]).word
        quest = f'В игре World of Tanks воплотили Нормандию\nИтого за первый тур Вы набрали: {points[1]}' \
                f' {point}.\nНу что ж? А тепереь третий и последний тур, который поможет узнать много нового. В ' \
                f'нём будет семь вопросов, на которые также надо будет ответить. За правильный ответ - 1 балл. Мозго' \
                f'бойня продолжается!'
        return generate_response(req, quest, end_session=False)

    if c[0] == 17:
        quest = 'Первый вопрос. Самолеты какой марки разработаны конструкторами Гуревич и Микоян?'
        return generate_question(req, quest)

    if c[0] == 18:
        if "миг" in answer_users[-1]:
            points[2] += 1
        quest = 'Правильный ответ: Гуревич и Микоян разработали марку "МиГ".\nВторой вопрос. Кого Бенедикт ' \
                'Камбербэтч играл в фильме "Игра в имитацию"?'
        return generate_question(req, quest)

    if c[0] == 19:
        if 'алан' in answer_users[-1] and 'тьюринг' in answer_users[-1]:
            points[2] += 1
        quest = 'Правильный ответ: Бенедикт Камбербэтч играл Алана Тьюринга в фильме "Игра в имитацию".\nТретий ' \
                'вопрос. Как называлась крепость рядом с городом Далянь в период русского владения?'
        return generate_question(req, quest)

    if c[0] == 20:
        if answer_users[-1] in {'порт-артур', 'порт артур', 'артур порт'}:
            points[2] += 1
        quest = 'Правильный ответ: Крепость Порт-Артур.\nЧетвертый вопрос. ' \
                'В какой стране производился танк "Матильда"?'
        return generate_question(req, quest)

    if c[0] == 21:
        if answer_users[-1] in {'в великобритании', 'великобритания', 'великобритании', 'в стране великобритания'}:
            points[2] += 1
        quest = 'Правильный ответ: В Великобритании.\n Пятый вопрос. Какое слово скрыто на кресте?'
        picture = '997614/63d0b89ea584eba402f5'
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 22:
        if answer_users[-1] in {'царь', "за царя", "царя"}:
            points[2] += 1
        quest = 'Правильный ответ: За царя.\n Шестой вопрос. Кто командовал Парадом Победы 1945 года??'
        return generate_question(req, quest)

    if c[0] == 23:
        if 'константин' in answer_users[-1] and 'рокоссовск' in answer_users[-1]:
            points[2] += 1
        quest = 'Правильный ответ: Константин Рокоссовский.\n Седьмой вопрос. Какая автомобильная компания до ' \
                '1940 года была поставщиком танков для армии Франции?'
        return generate_question(req, quest)

    if c[0] == 24:
        if 'рено' in answer_users[-1] or 'renault' in answer_users[-1]:
            points[2] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[2]).word
        sum_point = mword.make_agree_with_number(sum(points)).word
        quest = 'Правильный ответ: Renault(Рено).\nИтак, на этом наша игра подошла к концу. За третий тур Вы ' \
                f'набрали {points[2]} {point}, а за всю игру - {sum(points)} {sum_point}. До новых встреч, буду скучать!'
        theme[0] = ''
        c[0] = -1
        f[0] = 0
        points[:] = [0, 0, 0]
        themes[:] = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
                     'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
                     'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]
        return generate_response(req, quest, end_session=True)


def eat_i_love_you(req, answer_users):
    if c[0] == 1:
        speak = 'Пирожок вишнёвый на десерт не желаете?) Ой, пожалуй, мы не в Макдональдсе sil <[500]> В любом случае ' \
                'еда Вас очень любит. sil <[500]> Первый вопрос. Управляющий одной компании сказал: "Фрикадельки - ' \
                'лучшие продавцы диванов". ' \
                'Что это за компания?'
        quest = 'Первый вопрос. Управляющий одной компании сказал: "Фрикадельки - ' \
                'лучшие продавцы диванов". ' \
                'Что это за компания?'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 2:
        if 'икеа' in answer_users[-1]:
            points[0] += 1
        quest = 'Правильный ответ: ИКЕА.\nВторой вопрос. "... - это проблема, от которой ты не сможешь убежать". ' \
                'Какое слово пропущено в шутке?'
        speak = 'Правильный ответ: ик+ея.\nВторой вопрос. "... - это проблема, от которой ты не сможешь убежать". ' \
                'Какое слово пропущено в шутке?'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 3:
        if answer_users[-1] in {'ожирение', 'жир'}:
            points[0] += 1
        quest = 'Правильный ответ: Ожирение.\nТретий вопрос. Первое название этого товара было "насыщенная литием ' \
                'лимонно-лаймовая содовая" с этикеткой, похожей на нагрудник. Позднее его сократили и, возможно, ' \
                'указали в названии значение кислотности  pH более 7. О каком товаре идёт речь?'
        return generate_question(req, quest)

    if c[0] == 4:
        if answer_users[-1] in {'севен ап', '7 ап'}:
            points[0] += 1
        quest = 'Правильный ответ: 7UP.\nЧетвёртый вопрос. Продукт, из которого сделана это блюдо, обжаривают, ' \
                'перемалывают, а затем вводят в него специи. Во времена Пушкина эту массу запекали формах, ' \
                'обложенных тестом. В романе "Евгений Онегин" поэт даже называл его "Страсбурга пирог нетленный". ' \
                'Что за блюдо?'
        speak = 'Правильный ответ: SEVEN UP.\nЧетвёртый вопрос. Продукт, из которого сделана это блюдо, обжаривают, ' \
                'перемалывают, а затем вводят в него специи. Во времена Пушкина эту массу запекали формах, ' \
                'обложенных тестом. В романе "Евгений Онегин" поэт даже называл его "Страсбурга пирог нетленный". ' \
                'Что за блюдо?'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 5:
        if "паштет" in answer_users[-1]:
            points[0] += 1
        quest = 'Правильный ответ: Паштет.\nПятый вопрос. "Не должным образом вы употребляете блюдо состоящее из ' \
                'двух частей. Вы его расположили мясным изделием выше, а необходимо его на орган в полости рта. ' \
                'Таким образом мы добьемся большего гастрономического удовольствия". Фраза из какого мультфильма ' \
                'написана канцелярским языком?'
        return generate_question(req, quest)

    if c[0] == 6:
        if 'простоквашин' in answer_users[-1]:
            points[0] += 1
        quest = 'Правильный ответ: Трое из Простоквашино.\nШестой вопрос. Компания Боинг использовала мешки с ' \
                'этим продуктом вместо пассажиров в самолете, чтобы понять, как рассеивается Wi-Fi при полной ' \
                'посадке. Выбрали его из-за высокого содержания воды, большой плотности и размеров, а проект н' \
                'азвали синтетический персонал, использующий диэлектрическую замену. Какой продукт использовали?'
        return generate_question(req, quest)

    if c[0] == 7:
        if answer_users[-1] in {'картофель', 'картошка', "картошку"}:
            points[0] += 1
        quest = 'Правильный ответ: Картофель.\nСедьмой вопрос. Чем больше съедает персонаж этого актера, тем выше ' \
                'рейтинг фильма. Так, больше всего калорий он потребил в роли тренера бейсбольной команды. На втор' \
                'ом месте фильм, где его герой питался кровью, на третьем - история про команду друзей. Успех филь' \
                'мов с каким актером зависит от еды?'
        return generate_question(req, quest)

    if c[0] == 8:
        if "брэд" in answer_users[-1] and "питт" in answer_users[-1]:
            points[0] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[0]).word
        return generate_response(req, f'Правильный ответ: Брэда Питта.\nИтого за первый тур Вы '
                                      f'набрали: {points[0]} {point}.\n Во втором туре '
                                      f'вопросы будут связаны с фотографиями, на их выполнение будет отведено '
                                      f'по 30 секунд. Ну что ж?) Желаю удачи! Погнали!')

    if c[0] == 9:
        quest = 'Первый вопрос. Какой бренд зашифрован в картинках?'
        picture = '1030494/1b9398587be15f4cf523'
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 10:
        quest = "Правильный ответ: Lay's.\n" \
                "Второй вопрос. Чей натюрморт?"
        speak = "Правильный ответ: Лэйс.\n" \
                "Второй вопрос. Чей натюрморт?"
        picture = '1652229/9af28e20944b9135811c'
        if answer_users[-1] in {"lay's", 'лэйс', 'лейс', 'лейз', "лэйз"}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 11:
        quest = 'Правильный ответ: Казимира Малевича\nТретий вопрос. Реклама чего?'
        picture = '213044/878de1428952b30ffe10'
        if ("казимир" in answer_users[-1] and 'малевич' in answer_users[-1]) or 'малевич' in answer_users[-1]:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 12:
        quest = 'Правильный ответ: Жевательной резинки.\nЧетвёртый вопрос. В какой стране так выглядит школьный обед?'
        picture = '997614/0f66d0924104f063cb48'
        if answer_users[-1] in {'жевательной резинки', 'жевательная резинка', "жвачка", "жевачка", "жевачки", "жвачки"}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 13:
        quest = 'В Италии.\nПятый вопрос. Для какого продукта нож?'
        picture = '965417/6c919846669a0a4554c3'
        if 'итал' in answer_users[-1]:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 14:
        quest = 'Для авокадо.\nШестой вопрос. ' \
                'Какое слово скрыто?'
        picture = '997614/f55e7204efde0099b989'
        if "авокад" in answer_users[-1]:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 15:
        quest = 'Скайп.\nСедьмой вопрос. ' \
                'Из какого фильма кадр?'
        picture = '997614/4b0bf1af165deab65240'
        if answer_users[-1] in {'skype', 'скайп'}:
            points[1] += 1
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 16:
        if answer_users[-1] in {'шеф адам джонс'}:
            points[1] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[1]).word
        quest = f'Этот кадр из фильма "Шеф Адам Джонс"\nИтого за первый тур Вы набрали: {points[1]}' \
                f' {point}.\nНу что ж? А теперь третий и последний тур, который поможет узнать много нового. В ' \
                f'нём будет семь вопросов, на которые также надо будет ответить. За правильный ответ - 1 балл. Мозго' \
                f'бойня продолжается!'
        return generate_response(req, quest, end_session=False)

    if c[0] == 17:
        quest = 'Первый вопрос. Из чего состоит море на картинке?'
        picture = '1652229/77ffb3bc567284fc2b9c'
        return generate_question_with_photo(req, quest, picture)

    if c[0] == 18:
        if answer_users[-1] in {'из рыб', "рыб", "из рыбы", "рыбы", "рыба"}:
            points[2] += 1
        quest = 'Море на картинке состоит из рыбы.\nВторой вопрос. Рекламный слоган какого товара: ' \
                '"Покрути, лизни, обмакни"?'
        return generate_question(req, quest)

    if c[0] == 19:
        if 'орео' in answer_users[-1]:
            points[2] += 1
        quest = 'Это рекламный лоузнг товара "Орео".\nТретий ' \
                'вопрос. Какой ингредиент, помимо мидий, входит в moules frites?'
        return generate_question(req, quest)

    if c[0] == 20:
        if answer_users[-1] in {'картошка фри', 'фри', 'картофель фри'}:
            points[2] += 1
        quest = 'Помимо мидий, в moules frites входит картофель фри.\nЧетвертый вопрос. ' \
                'Какое растение используется для приготовления приправы карри?'
        return generate_question(req, quest)

    if c[0] == 21:
        if answer_users[-1] in {'куркума', 'корень куркумы', 'куркуму', 'корни куркумы'}:
            points[2] += 1
        quest = 'Для приготовления приправы карри используется Корень куркумы.\nПятый вопрос. ' \
                'Пирог с каким мясом подавали на свадьбе Джоффри баратеона и Маргери Тирелл в "Игре Престолов"?'
        return generate_question(req, quest)

    if c[0] == 22:
        if answer_users[-1] in {'голубиное мясо', "мясо голубей", "голубей", "с мясом голубей"}:
            points[2] += 1
        quest = 'Пирог подавали с мясом голубей.\nШестой вопрос. Какой продукт может быть антонимом к слову "свежина"?'
        return generate_question(req, quest)

    if c[0] == 23:
        if 'ветчин' in answer_users[-1]:
            points[2] += 1
        quest = 'Антонимом к слову "свежина" может быть ветчина.\nСедьмой вопрос. Какое блюдо в ' \
                'Венгрии носит название "французский королевский кремовый"?'
        return generate_question(req, quest)

    if c[0] == 24:
        if 'наполеон' in answer_users[-1]:
            points[2] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[2]).word
        sum_point = mword.make_agree_with_number(sum(points)).word
        quest = '"Французский королевский кремовый" - торт Наполеон.\nИтак, на этом наша игра подошла к концу. ' \
                'За третий тур Вы набрали ' \
                f'{points[2]} {point}, а за всю игру - {sum(points)} {sum_point}. До новых встреч, буду скучать!'
        theme[0] = ''
        c[0] = -1
        f[0] = 0
        points[:] = [0, 0, 0]
        themes[:] = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
                     'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
                     'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]
        return generate_response(req, quest, end_session=True)


def black_money_for_ALEXANDRIT_R8(req, answer_users):
    if c[0] == 1:
        speak = 'Я пришла из будущего, чтобы сообщить Вам,' \
                'что через 7 лет у вас будет ипот+ека. sil <[500]> Но перекл+ючимся к настоящему sil <[500]> ' \
                'Первый тур. "Верно или неверно".\n' \
                'Первое утверждение. Заправляться на АЗС выгоднее в прохладное время.'
        quest = 'Первый тур - "Верно или неверно".\n' \
                'Заправляться на АЗС выгоднее в прохладное время.'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 2:
        if 'верн' in answer_users[-1] or 'правильн' in answer_users[-1] or 'да' in answer_users[-1]:
            points[0] += 1
        speak = 'И, конечно, это верно!.\nСледующее утверждение. Если в сумке лежит бесконтактная карта, то с нее ' \
                'мошенники могут украсть деньги, просто приложив банковский терминал'
        quest = 'Верно.\nЕсли в сумке лежит бесконтактная карта, то с нее ' \
                'мошенники могут украсть деньги, просто приложив банковский терминал'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 3:
        if 'неверн' in answer_users[-1] or 'неправильн' in answer_users[-1] or 'нет' in answer_users[-1] or \
                'не верн' in answer_users[-1]:
            points[0] += 1
        speak = 'Ну, тут без сомнений... Нет!\nУтверждение под номером три. Мария Петровна и Николай Дмитриевич ' \
                'вместе уже 60 лет. Это не только бриллиантовая свадьба, но и возможность получить подарок от го' \
                'сударства в виде государственной выплаты за долгий брак'
        quest = 'Ну, тут без сомнений... Нет!\nУтверждение 3. Мария Петровна и Николай Дмитриевич вместе уже 60 лет. ' \
                'Это не только бриллиантовая свадьба, но и возможность получить подарок от государства в виде государ' \
                'ственной выплаты за долгий брак.'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 4:
        if 'верн' in answer_users[-1] or 'правильн' in answer_users[-1] or 'да' in answer_users[-1]:
            points[0] += 1
        speak = 'А почему нет? Конечно, верно.\nЧетвёртое утверждение. Если вы как гражданин РФ проживаете ' \
                'за границей, вы имеете право на материнский капитал при рождении ребенка.'
        quest = 'Верно.\nЕсли вы как гражданин РФ проживаете ' \
                'за границей, вы имеете право на материнский капитал при рождении ребенка.'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 5:
        if 'верн' in answer_users[-1] or 'правильн' in answer_users[-1] or 'да' in answer_users[-1]:
            points[0] += 1
        speak = 'Безусловно.\nСледующее утверждение. Посудомоечная машина потребляет гораздо больше воды, чем ' \
                'при мойке руками, что увеличивает расход по коммунальным платежам.'
        quest = 'Верно.\nПосудомоечная машина потребляет гораздо больше воды, чем ' \
                'при мойке руками, что увеличивает расход по коммунальным платежам.'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 6:
        if 'неверн' in answer_users[-1] or 'неправильн' in answer_users[-1] or 'нет' in answer_users[-1] or \
                'не верн' in answer_users[-1]:
            points[0] += 1
        speak = 'Страшная ложь.\nУтверждение под номером шесть. На фондовом рынке есть 2 вида игроков: медведи и ' \
                'быки. Медведи стараются купить акции дешевле и продать подороже. Быки, наоборот, ' \
                'зарабатывают на падении акций.'
        quest = 'Страшная ложь.\nУтверждение 6. На фондовом рынке есть 2 вида игроков: медведи и быки. Медведи ' \
                'стараются купить акции дешевле и продать подороже. Быки, наоборот, зарабатывают на падении акций.'
        return generate_question(req, quest, speaking=speak)

    if c[0] == 7:
        if 'неверн' in answer_users[-1] or 'неправильн' in answer_users[-1] or 'нет' in answer_users[-1] or \
                'не верн' in answer_users[-1]:
            points[0] += 1
        speak = 'Конечно, нет. Последнее утверждение. Банк может обменять вам купюру с такими повреждениями:'
        quest = 'Неверно.\nБанк может обменять вам купюру с такими повреждениями:'
        picture = '1540737/d5ad5b179eded1a1659b'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 8:
        if 'верн' in answer_users[-1] or 'правильн' in answer_users[-1] or 'да' in answer_users[-1]:
            points[0] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[0]).word
        return generate_response(req, f'Банк всё может!\nИтого за первый тур Вы '
                                      f'набрали: {points[0]} {point}.\n Во втором туре '
                                      f'вопросы будут связаны с фотографиями, на их выполнение будет отведено '
                                      f'по 30 секунд. Ну что ж?) Желаю удачи! Погнали!')

    if c[0] == 9:
        speak = 'Итак, первый вопрос. Какая платежная система изображена в стиле минимализм?'
        quest = 'Какой бренд зашифрован в картинках?'
        picture = '1652229/7ace786afe8b1f47dff1'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 10:
        if 'мир' in answer_users[-1]:
            points[1] += 1
        quest = "Карта МИР.\n" \
                "Какая валюта обозначается таким символом?"
        speak = "Смотря на эту картину я получаю внутренне умиротворение. А вы? Это карта МИР\n" \
                "Следующий вопрос для гения. Какая валюта обозначается таким символом?"
        picture = '1652229/d535bbad205886fcb2b6'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 11:
        if 'песо' in answer_users[-1]:
            points[1] += 1
        quest = "Песо.\n" \
                "Где располагаются эти эмблемы?"
        speak = "Валюта - это хорошо, а песо - ещё лучше.\n" \
                "Вопрос номер три ждёт тебя. Где располагаются эти эмблемы?"
        picture = '1030494/34eab0c3caed30bee766'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 12:
        if 'монет' in answer_users[-1]:
            points[1] += 1
        quest = "На монетах.\n" \
                "Вы купили одну акцию фирмы “Ромашка” за 1000 рублей. Компания заработала один доход и выплатила " \
                "акционерам дивиденды с прибыли - 50 рублей на акцию. Также вы купили одну акцию компании “Одуван" \
                "чик” за 100 рублей, которая по итогам года выплатила дивиденды в размере 10 рублей на акцию. Дох" \
                "одность от акции в какой компании будет больше?"
        speak = "Конечно, на монетах. Четвёртый вопрос.\n" \
                'Вы купили одну акцию фирмы "Ромашка" за 1000 рублей. Компания заработала один доход и выплатила ' \
                'акционерам дивиденды с прибыли - 50 рублей на акцию. Также вы купили одну акцию компании "Одуван' \
                'чик" за 100 рублей, которая по итогам года выплатила дивиденды в размере 10 рублей на акцию. Дох' \
                "одность от акции в какой компании будет больше?"
        picture = '1652229/bd2a5e9980bbdbc2f935'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 13:
        if 'одуванчик' in answer_users[-1]:
            points[1] += 1
        quest = "Одуванчик.\n" \
                "Какую бумагу делают из этих материалов?"
        speak = "Больше доходов от одуванчика).\n" \
                "Вопрос на миллион... Какую бумагу делают из этих материалов?"
        picture = '997614/35831f327b24f84e7647'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 14:
        if 'деньги' in answer_users[-1] or 'денежн' in answer_users[-1]:
            points[1] += 1
        quest = "Деньги.\n" \
                "Какое слово зашифровано?"
        speak = "Счастье не в деньгах.\n" \
                "Вопрос для сыщика. Какое слово зашифровано?"
        picture = '1540737/7d5807cfb306738f09d5'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 15:
        if 'ипотек' in answer_users[-1]:
            points[1] += 1
        quest = "Ипотека.\n" \
                "За сколько полных дней Евгений накопит на смартфон стоимостью 2500 рублей при таких ежедневных " \
                "доходах и расходах?"
        speak = "Ну, конечно, ипотека).\n" \
                "Последний вопрос этого тура. За сколько полных дней Евгений накопит на смартфон стоимостью 250" \
                "0 рублей при таких ежедневных доходах и расходах?"
        picture = '1652229/6daf99fe70fd59987949'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 16:
        if '28' in answer_users[-1] or 'двадцать восемь' in answer_users[-1]:
            points[1] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[1]).word
        speak = f'Если правильно решить задачу, то получится 28 дней)"\nИтого за второй тур Вы набрали: {points[1]}' \
                f' {point}.\nА теперь третий и последний тур, который явно не для делетантов. В ' \
                f'нём будет пять вопросов. За правильный ответ Вы получаете 1 балл. Мозго' \
                f'бойня продолжается!'
        quest = f'За 28 дней"\nИтого за второй тур Вы набрали: {points[1]}' \
                f' {point}.\nНу что ж? А теперь третий и последний тур. В ' \
                f'нём будет пять вопросов. За правильный ответ - 1 балл. Мозго' \
                f'бойня продолжается!'
        return generate_response(req, quest, speaking=speak, end_session=False)

    if c[0] == 17:
        quest = 'Заключительный тур. Ответом на все вопросы будут являться числа.\n' \
                'Интернет магазин "Крутые шмотки" , постоянным клиентом которого вы являетесь, прислал вам на ' \
                'электронную почту ссылку. В письме вас просят перейти по ней, чтобы проверить данные используемой ' \
                'карты. Как правильно поступить?'
        speak = 'Заключительный тур. Ответом на все вопросы будут являться числа.\n' \
                'Итак, первый вопрос. Интернет магазин "Крутые шмотки" , постоянным клиентом которого вы являетесь, ' \
                'прислал вам на электронную почту ссылку. В письме вас просят перейти по ней, чтобы проверить данные' \
                ' используемой карты. Как правильно поступить?'
        picture = '1521359/aaadabd4ba7ffbeae4db'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 18:
        if '2' in answer_users[-1] or 'два' in answer_users[-1] or 'втор' in answer_users[-1]:
            points[2] += 1
        quest = '2.\n' \
                'Ваша одноклассница Варвара Летова пишет вам в социальной сети, что ей нужны деньги в долг на пару ' \
                'недель, но скинуть нужно на карту ее знакомого, так как к ее у нее сейчас нет доступа, а деньги ' \
                'срочно потребовались. Что нужно сделать?'
        speak = 'Второй вариант идеально подойдёт. Вопрос под номером два.' \
                'Ваша одноклассница Варвара Летова пишет вам в социальной сети, что ей нужны деньги в долг на пару ' \
                'недель, но скинуть нужно на карту ее знакомого, так как к её у неё сейчас нет доступа, а деньги ' \
                'срочно потребовались. Что нужно сделать?'
        picture = '1521359/f170f13b4a288e365e03'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 19:
        if '3' in answer_users[-1] or 'три' in answer_users[-1] or 'трет' in answer_users[-1]:
            points[2] += 1
        quest = '3.\n' \
                'Вы решили открыть свою кофейню со вкусными булочками, но денег совсем нет, а кредит брать не ' \
                'хочется. Тут вас посещает идея воспользоваться: специальным сервисом, через который вы соберете ' \
                'нужную сумму с разных людей. Каким термином называется то, чем вы решили заняться?'
        speak = 'В таких случаях нужен третий вариант. Следующий вопрос\n' \
                'Вы решили открыть свою кофейню со вкусными булочками, но денег совсем нет, а кредит брать не ' \
                'хочется. Тут вас посещает идея воспользоваться: специальным сервисом, через который вы соберете ' \
                'нужную сумму с разных людей. Каким термином называется то, чем вы решили заняться?'
        picture = '1521359/504810d5c7009e58413b'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 20:
        if '1' in answer_users[-1] or 'один' in answer_users[-1] or 'перв' in answer_users[-1]:
            points[2] += 1
        quest = '1.\n' \
                'Вы давно мечтаете о таком же костюме, как в фильме "Джентльмены", но он стоит целых 30 тысяч ' \
                'рублей. Тут вы видите кредитную карту с льготным периодом 60 дней, стоимостью обслуживания 1 ' \
                'рубль в день и минимальным процентом первого платежа, равного 1%. Вы решаете оформить карту, ' \
                'чтобы порадовать себя новеньким костюмом. Какой у вас будет минимальным платеж на 55 день льготного ' \
                'периода.'
        speak = 'Ответом на этот вопрос является цифра один. Ну, а мы продолжаем) Четвертый вопрос\n' \
                'Вы давно мечтаете о таком же костюме, как в фильме "Джентльмены", но он стоит целых 30 тысяч ' \
                'рублей. Тут вы видите кредитную карту с льготным периодом 60 дней, стоимостью обслуживания 1 ' \
                'рубль в день и минимальным процентом первого платежа, равного 1%. Вы решаете оформить карту, ' \
                'чтобы порадовать себя новеньким костюмом. Какой у вас будет минимальным платеж на 55 день льготного ' \
                'периода.'
        picture = '1030494/e776c2925620026f843b'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 21:
        if '2' in answer_users[-1] or 'два' in answer_users[-1] or 'втор' in answer_users[-1]:
            points[2] += 1
        quest = '2.\n' \
                'Вы пошли в магазин за чем-нибудь вкусненьким и заодно разменять 1000 рублей. Пересчитывая сдачу, ' \
                'вы впервые в жизни столкнулись с новенькой купюрой номиналом 200 рублей. что вас убедит в том, что ' \
                'это не подделка?'
        speak = 'Конечно, цифра 2. И последний вопрос.\n' \
                'Вы пошли в магазин за чем-нибудь вкусненьким и заодно разменять 1000 рублей. Пересчитывая сдачу, ' \
                'вы впервые в жизни столкнулись с новенькой купюрой номиналом 200 рублей. что вас убедит в том, что ' \
                'это не подделка?'
        picture = '213044/9ddb7e2879040ac645d4'
        return generate_question_with_photo(req, quest, picture, speaking=speak)

    if c[0] == 22:
        if '4' in answer_users[-1] or 'четыре' in answer_users[-1] or 'четвёрт' in answer_users[-1] or \
                'четверт' in answer_users[-1]:
            points[2] += 1
        mword = morph.parse('очко')[0]
        point = mword.make_agree_with_number(points[2]).word
        sum_point = mword.make_agree_with_number(sum(points)).word
        quest = '4.\nИтак, на этом наша игра подошла к концу, а это значит, что пора подводить итоги. ' \
                'За третий тур Вы набрали ' \
                f'{points[2]} {point}, а за всю игру - {sum(points)} {sum_point}.\n' \
                f'Вы показали себя достойно! До новых встреч!'
        theme[0] = ''
        c[0] = -1
        f[0] = 0
        points[:] = [0, 0, 0]
        themes[:] = ['великие сражения двадцатого века', 'великие сражения 20 века', 'первая тема', "первую тему",
                     'еда, я люблю тебя', 'еда я люблю тебя', "вторая тема", "вторую тему",
                     'карты, деньги, финсовет', "карты деньги финсовет", "третья тема", "третью тему"]
        return generate_response(req, quest, end_session=True)


if __name__ == '__main__':
    app.run('0.0.0.0', 8080)